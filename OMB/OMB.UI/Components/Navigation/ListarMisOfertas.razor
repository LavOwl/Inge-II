@page "/listarmisofertas"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage
@inject userListUseCase userListUseCase
@inject listTransportUseCase listTransportUseCase
@inject offerListUseCase offerListUseCase
@inject deleteOfferUseCase deleteOfferUseCase

<DialogoConfirmacion @ref="dialogoConfirmacion" OnConfirmado="eliminarOferta"/>

<div class="offers-container">
    @if (offerList.Any()) {
        @foreach (var offer in offerList){
            <div class="offer">
                <div class="offer-info">
                    <h3>Oferta a @getOfferTarget(offer).userName </h3>
                    <h6>Ofreces @getOfferedTransport(offer).plate </h6>
                    <h6>Pedis @getPostedTransport(offer).plate </h6>
                </div>
            </div>
            <div class="offer">
                <button class="btn btn-danger" @onclick="()=>confirmarEliminarOferta(offer)">
                          <i class='bx bxs-trash-alt'></i>
                </button>
            </div>
        }
    } else {
        <h1>No hay ofertas realizadas</h1>
    }
</div>

@code {
    List<Offer> offerList = new List<Offer>();
        
    List<Transport> transportList = new List<Transport>();

    List<User> userList = new List<User>(); 

    DialogoConfirmacion dialogoConfirmacion = null!;

    int loggedUserId;

    Offer offerAux;

    protected override async Task OnInitializedAsync() {
        //Inicializo en offerList las ofertas hechas por el usuario loggeado
        //Se supone que acá solo llegan los clientes loggeados
        var getLoggedUser = await sessionStorage.GetAsync<int>("userId");
        loggedUserId = getLoggedUser.Success ? getLoggedUser.Value : 0;

        userList = userListUseCase.Execute();

        transportList = listTransportUseCase.Execute();

        getOfferList();
    }

    public void getOfferList () {
        //Ids de todos los transportes del usuario loggeado
        List<int> transportIds = listTransportUseCase.Execute().Where(T => T.UserId == loggedUserId).ToList().Select(T => T.Id).ToList();
        //Todas las ofertas en las que se ofrecen transportes del usuario loggeado
        offerList = offerListUseCase.Execute().Where(O => transportIds.Contains(O.transporteOfertadoId)).ToList();
    }

    public User getOfferTarget(Offer offer) {
        return userList.Where(U => U.Id == getPostedTransport(offer).UserId).SingleOrDefault();
    }

    public Transport getOfferedTransport(Offer offer) {
        return transportList.Where(T => T.Id == offer.transporteOfertadoId).SingleOrDefault();
    }

    public Transport getPostedTransport(Offer offer) {
        return transportList.Where(T => T.Id == offer.transportePosteadoId).SingleOrDefault();
    }

    public void confirmarEliminarOferta(Offer offer) {
        offerAux = offer;
        dialogoConfirmacion.Mostrar("¿Seguro qué deseas eliminar la oferta?");
    }

    private bool sonIguales(Offer o1, Offer o2) {
        //Se supone que no debería haber dos así
        return o1.transportePosteadoId == o2.transportePosteadoId && o1.transporteOfertadoId == o2.transporteOfertadoId;
    }

    public void eliminarOferta() {
        deleteOfferUseCase.Execute(offerAux.Id);
        getOfferList();
    }
}
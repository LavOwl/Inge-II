@page "/vehiculo/{patente?}"
@inject vehicleListUseCase vehicleListUseCase
@rendermode InteractiveServer
@inject listVehicleImagesUseCase listVehicleImagesUseCase
@inject NavigationManager Navegador
@inject ProtectedSessionStorage sessionStorage
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage


<button class="btn btn-secondary" @onclick="MoveLeft">&lt;</button>
<button class="btn btn-secondary" @onclick="MoveRight">&gt;</button>
<table>
    <thead>
        <tr>
            <th>
                Imagenes
            </th>
            <th>
                Datos
            </th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><img src="@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(images[i]))" width="300" height="300"/></td>
            <td>
                @v.type <br>
                Modelo: @v.model <br>
                Patente: @v.plate <br>
                Kilometros: @v.kms <br>
                Puertas: @v.doors <br>
                Descripci√≥n: @v.description <br>
            </td>
        </tr>
    </tbody>
</table>


@code{
    int i = 0;
    int limit;
    Vehicle v = new Vehicle();
    [Parameter] public string? patente {get; set;}
    List<byte[]> images = new List<byte[]>();
    protected override async Task OnInitializedAsync(){
        var aux = await Task.Run(() => vehicleListUseCase.Execute().Where(ve => ve.plate == patente).SingleOrDefault());
        v = aux ?? new Vehicle();
        List<VehicleImage> veim = listVehicleImagesUseCase.Execute().Where(im => im.VehicleId == v.Id).ToList();
        foreach(VehicleImage ve in veim){
            images.Add(ve.Image);
        }
        limit = images.Count() - 1;
    }

    public void MoveRight(){
        if(i < limit){
            i++;
        }
        else{
            i = 0;
        }
        StateHasChanged();
    }

    public void MoveLeft(){
        if(i > 0){
            i--;
        }
        else{
            i = limit;
        }
        StateHasChanged();
    }
}
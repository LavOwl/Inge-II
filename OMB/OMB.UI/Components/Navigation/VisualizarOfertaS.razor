@page "/visualizarofertaship/{offerId:int?}"
@inject NavigationManager Navegador
@inject offerListUseCase offerListUseCase
@inject shipListUseCase shipListUseCase
@inject userListUseCase userListUseCase
@inject listPostUseCase listPostUseCase
@inject modifyOfferUseCase modifyOfferUseCase
@inject modifyPostUseCase modifyPostUseCase
@inject addUnresolvedExchangeUseCase addUnresolvedExchangeUseCase
@inject deleteOfferUseCase deleteOfferUseCase
@inject listTransportUseCase listTransportUseCase
@inject userListUseCase userListUseCase

<DialogoConfirmacion @ref="dialogo" OnConfirmado="resolver"/>

<div>
    <h3> Te han ofrecido un @offeredship.type de marca @offeredship.model </h3>
	<h6> (Imagenes) </h6>
	<h6> Ofrecido por @userOffering.userName </h6>
    <h6> @offeredship.description </h6>
	<h6> Patente @offeredship.plate </h6>
    <h6> Eslora @offeredship.eslora </h6>
	<h6> Manga @offeredship.manga </h6>
	<h6> Calado @offeredship.calado </h6>
</div>
<div>
	<button class="btn btn-primary" @onclick="confirmarAceptarOferta" data-bs-dismiss="modal">Aceptar oferta</button>
    <button class="btn btn-danger" @onclick="confirmarRechazarOferta" data-bs-dismiss="modal">Rechazar oferta</button>
</div>

<Emails @ref=emails/>

@code {

	[Parameter] public int? offerId {get; set;}

	Offer offer = new Offer(0, 0);

	Ship offeredship = new Ship();

	User userOffering = new User();

	DialogoConfirmacion dialogo = null!;
	Emails emails = null!;

	bool accion = false;

	protected override async Task OnAfterRenderAsync(bool firstRender) {

		offer = offerListUseCase.Execute().Where(O => O.Id == offerId).SingleOrDefault();

		offeredship = shipListUseCase.Execute().Where(T => T.Id == offer.transporteOfertadoId).SingleOrDefault();

		userOffering = userListUseCase.Execute().Where(U => U.Id == offeredship.UserId).SingleOrDefault();

		StateHasChanged();

	}

	public void confirmarAceptarOferta () {
		accion = true;
		dialogo.Mostrar("¿Seguro que deseas aceptar la oferta?");
	}

	public void confirmarRechazarOferta () {
		accion = false;
		dialogo.Mostrar("¿Seguro que deseas rechazar la oferta?");
	}

	private void pausePost (int transportId) {
		Post post = listPostUseCase.Execute().Where(P => P.TransportId == transportId).SingleOrDefault();
		if (post != null) {
			post.paused = true;
			modifyPostUseCase.Execute(post);
		}
	}

	private void borrarOfertas (int transportId) {
		List<int> offers = offerListUseCase.Execute().Where(O => O.transporteOfertadoId == transportId && O.state == "active").ToList().Select(O => O.Id).ToList();
		foreach (int id in offers) {
			deleteOfferUseCase.Execute(id);
		}
	}

	public void aceptarOferta () {
		pausePost(offer.transporteOfertadoId);
		pausePost(offer.transportePosteadoId);

		offer.state = "accepted";
		modifyOfferUseCase.Execute(offer);

		UnresolvedExchange unresolvedExchange = new UnresolvedExchange(offer.transportePosteadoId, offer.transporteOfertadoId);
		addUnresolvedExchangeUseCase.Execute(unresolvedExchange);

		borrarOfertas(offer.transporteOfertadoId);
		borrarOfertas(offer.transportePosteadoId);

		// Mail para avisar al ofertante
		User ofertante = getUser(offer.transporteOfertadoId);
		string titulo = getTitle(offer.transportePosteadoId);

		emails.SendEmail(
			"¡Oferta aceptada!", // Subject
			ofertante.mail, // Mail
			"¡Oferta aceptada!", // Titulo
			$@"
			<p style='line-height: 140%;color: #f4f4f4;margin-bottom: 0;'>¡Tu oferta a <b>{titulo}</b> ha sido aceptada!</p>
			<p style='line-height: 140%;color: #f4f4f4;margin-top: 0;'>Ya podés entrar a la página para concretar el horario de intercambio</p>
			" // Cuerpo
		);

		Navegador.NavigateTo("listarmisintercambios/", true);
		
	}

	public void rechazarOferta () {
		offer.state = "rejected";
		modifyOfferUseCase.Execute(offer);
	
		// Mail para avisar al ofertante
		User ofertante = getUser(offer.transporteOfertadoId);
		string titulo = getTitle(offer.transportePosteadoId);

		emails.SendEmail(
			"Oferta rechazada", // Subject
			ofertante.mail, // Mail
			"Oferta rechazada", // Titulo
			$@"
			<p style='line-height: 140%;color: #f4f4f4;margin-bottom: 0;'>Tu oferta a <b>{titulo}</b> ha sido rechazada</p>
			<p style='line-height: 140%;color: #f4f4f4;margin-top: 0;'>Podés entrar a la página para seguir buscando el transporte de tus sueños</p>
			" // Cuerpo
		);

		if (isVehicle(offer.transportePosteadoId)) {
			Navegador.NavigateTo("vehiclepost/" + offer.transportePosteadoId, true);	
		}
		else {
			Navegador.NavigateTo("shippost/" + offer.transportePosteadoId, true);
		}
	}

	public bool isVehicle (int id) {
		return !shipListUseCase.Execute().Any(S => S.Id == id);
	}

	//Si metemos dos dialogos confirmacion puede haber problemas
	public void resolver () {
		if (accion)
			aceptarOferta();
		else
			rechazarOferta();
	}

	public User getUser(int transportId) {
		Transport transport = listTransportUseCase.Execute().Find(trans => trans.Id == transportId);
		return userListUseCase.Execute().Find(user => user.Id == transport.UserId);
	}

	public string getTitle(int transportId) {
		Transport postedTransport = listTransportUseCase.Execute().Find(transport => transport.Id == transportId);
    Post post = listPostUseCase.Execute().Find(post => post.TransportId == postedTransport.Id);
		return post.Title;
	}

}
@page "/listarintercambios"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage
@inject NavigationManager navegador
@inject userListUseCase userListUseCase
@inject listTransportUseCase listTransportUseCase
@inject unresolvedExchangeListUseCase unresolvedExchangeListUseCase
@inject listPostUseCase listPostUseCase
@inject shipListUseCase shipListUseCase
@inject listVehicleImagesUseCase listVehicleImagesUseCase
@inject listShipImagesUseCase listShipImagesUseCase

<div class="exchanges-container">
  <div class="exchanges">
    <h1 class="exchanges-title">Intercambios</h1>
    <div class="exchanges-body">
      @if (exchanges.Any()) {
        int i = 0;
        <table width="10%" class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>Publicado</th>
                    <th colspan="2">Estado del intercambio</th>
                    <th>Ofertado</th>
                </tr>
            </thead>
            <tbody>
              @foreach (var exchange in exchanges){
                <tr @onclick="()=>browseToExchange(exchange)">
                  <td rowspan="2" class="img">
                    <img src="@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(images[i]))"/>
                  </td>
                  <td>
                    <p><strong>Publicación: @getPostedTransport(exchange)</strong></p>
                    <p>Dueño de la publicación: @getPostTarget(exchange)</p>
                  </td>
                  <td>
                    <p><strong>Ofertado: @getOfferedTransport(exchange)</strong></p>
                    <p>Ofertante: @getOfferTarget(exchange)</p>
                  </td>
                  <td rowspan="2" class="img">
                    <img src="@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(imgOffer[i]))"/>
                  </td>
                </tr>
                <tr @onclick="()=>browseToExchange(exchange)">
                  <td colspan="2">@($"Intercambio programado para el {exchange.fechaYHora} en la {exchange.sede}")</td>
                </tr>
                i++;
              }
          </tbody>
        </table>
      } else {
        <h3 class="text-center">Aún no hay intercambios</h3>
      }
    </div>
  </div>
</div>

@code {
  List<UnresolvedExchange> exchanges = new List<UnresolvedExchange>();
  List<Transport> transports = new List<Transport>();
  List<Post> posts = new List<Post>();
  List<User> users = new List<User>();
  List<byte[]> imgOffer = new List<byte[]>();
  
  List<VehicleImage> vehicleImages = new List<VehicleImage>();
  List<ShipImage> shipImages = new List<ShipImage>();
  List<byte[]> images = new List<byte[]>();

  protected override void OnInitialized() {
    // Inicializo listas para usarlas después
    users = userListUseCase.Execute();
    transports = listTransportUseCase.Execute();
    exchanges = unresolvedExchangeListUseCase.Execute().Where(E => E.state == "Accepted").ToList();
    exchanges.Reverse();

    posts = listPostUseCase.Execute();
    vehicleImages = listVehicleImagesUseCase.Execute();
    shipImages = listShipImagesUseCase.Execute();
    getImages();
  }

  public void getImages() {
    foreach (var exchange in exchanges) {
      int transportId = exchange.transportePosteadoId;
      int offTrans = exchange.transporteOfertadoId;

      if(isVehicle(offTrans)){
        imgOffer.Add(vehicleImages.Where(img => img.VehicleId == offTrans).FirstOrDefault(new VehicleImage(1, new byte[1])).Image);
      }
      else{
        imgOffer.Add(shipImages.Where(img => img.ShipId == offTrans).FirstOrDefault(new ShipImage(1, new byte[1])).Image);
      }

      if (isVehicle(transportId)) {
        images.Add(vehicleImages.Find(img => img.VehicleId == transportId).Image);
      } else {
        images.Add(shipImages.Find(img => img.ShipId == transportId).Image);
      }
    }
  }

  public bool isVehicle (int transportId) {
		return !shipListUseCase.Execute().Any(ship => ship.Id == transportId);
	}

  // Obtiene el userName del dueño del post involucrado
  public string getPostTarget(UnresolvedExchange exchange) {
    Transport postedTransport = transports.Find(transport => transport.Id == exchange.transportePosteadoId);
    User postedTransportOwner = users.Find(user => user.Id == postedTransport.UserId);
    return postedTransportOwner.userName;
  }

  // Obtiene el userName del dueño del transporte ofertado involucrado
  public string getOfferTarget(UnresolvedExchange exchange) {
    Transport offeredTransport = transports.Find(transport => transport.Id == exchange.transporteOfertadoId);
    User postedTransportOwner = users.Find(user => user.Id == offeredTransport.UserId);
    return postedTransportOwner.userName;
  }

  // Obtiene la patente del transporte ofrecido
  public string getOfferedTransport(UnresolvedExchange exchange) {
    Transport offeredTransport = transports.Find(transport => transport.Id == exchange.transporteOfertadoId);
    return $"{offeredTransport.type} {offeredTransport.model} {offeredTransport.plate}";
  }

  // Obtiene la patente del transporte publicado
  public string getPostedTransport(UnresolvedExchange exchange) {
    Transport postedTransport = transports.Find(transport => transport.Id == exchange.transportePosteadoId);
    return $"{postedTransport.type} {postedTransport.model} {postedTransport.plate}";
  }

    public void browseToExchange(UnresolvedExchange exchange) {
        navegador.NavigateTo($"visualizarintercambio/{exchange.Id}", true);
    }
}
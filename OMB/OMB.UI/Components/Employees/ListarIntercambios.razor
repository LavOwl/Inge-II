@page "/listarintercambios"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage
@inject userListUseCase userListUseCase
@inject listTransportUseCase listTransportUseCase
@inject unresolvedExchangeListUseCase unresolvedExchangeListUseCase

<div class="exchanges-container">
  <div class="exchanges">
    <h1 class="exchanges-title">Intercambios</h1>
    <div class="exchanges-body">
      @if (exchanges.Any()) {
          @foreach (var exchange in exchanges){
              <div class="exchange-info">
                <h4>Dueño publicación @getPostTarget(exchange)</h4>
                <h4>Dueño oferta @getOfferTarget(exchange)</h4>
                <h6>Publicado @getPostedTransport(exchange)</h6>
                <h6>Ofertado @getOfferedTransport(exchange)</h6>
              </div>
          }
      } else {
        <h3 class="text-center">Aún no hay intercambios</h3>
      }
    </div>
  </div>
</div>

@code {
  List<UnresolvedExchange> exchanges = new List<UnresolvedExchange>();
  List<Transport> transports = new List<Transport>();
  List<User> users = new List<User>();

  protected override async Task OnInitializedAsync() {
    users = userListUseCase.Execute();
    transports = listTransportUseCase.Execute();
    exchanges = unresolvedExchangeListUseCase.Execute();
  }

  // Obtiene el userName del dueño del post involucrado
  public string getPostTarget(Exchange exchange) {
    Transport postedTransport = transports.Find(transport => transport.Id == exchange.transportePosteadoId);
    User postedTransportOwner = users.Find(user => user.Id == postedTransport.UserId);
    return postedTransportOwner.userName;
  }

  // Obtiene el userName del dueño del transporte ofertado involucrado
  public string getOfferTarget(Exchange exchange) {
    Transport offeredTransport = transports.Find(transport => transport.Id == exchange.transporteOfertadoId);
    User postedTransportOwner = users.Find(user => user.Id == offeredTransport.UserId);
    return postedTransportOwner.userName;
  }

  // Obtiene la patente del transporte ofrecido
  public string getOfferedTransport(Exchange exchange) {
    Transport offeredTransport = transports.Find(transport => transport.Id == exchange.transporteOfertadoId);
    return offeredTransport.plate;
  }

  // Obtiene la patente del transporte publicado
  public string getPostedTransport(Exchange exchange) {
    Transport postedTransport = transports.Find(transport => transport.Id == exchange.transportePosteadoId);
    return postedTransport.plate;
  }
}
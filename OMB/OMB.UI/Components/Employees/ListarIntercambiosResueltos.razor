@page "/listarintercambiosresueltos"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage
@inject userListUseCase userListUseCase
@inject listTransportUseCase listTransportUseCase
@inject resolvedExchangeListUseCase resolvedExchangeListUseCase
@inject listPostUseCase listPostUseCase
@inject shipHistoryListUseCase ShipHistoryListUseCase
@inject vehicleHistoryListUseCase VehicleHistoryListUseCase

 <div class="exchanges-container">
  <div class="exchanges">
    <h1 class="exchanges-title">Intercambios resueltos</h1>
    <div class="exchanges-body">
      @if (exchanges.Any()) {
        @foreach (var exchange in exchanges){
          <div class="exchange-info">
            <div>
              <p><strong>Transporte publicado: @getPostedTransport(exchange)</strong> <br>
              Dueño del transporte publicado: @getPostTarget(exchange)</p>
              <p><strong>Transporte ofertado: @getOfferedTransport(exchange)</strong> <br>
              Ofertante transporte ofertado: @getOfferTarget(exchange)</p>
              @if (@exchange.happen) {
                <p>-Intercambio concretado el @(exchange.fechaYHora.ToString("dd/MM/yyyy")) a las @(exchange.fechaYHora.ToString("HH:mm tt")) en la @(exchange.sede)</p>
              }
              else {
                <p>-Intercambio no concretado</p>
              }
            </div>
          </div>
        }
      } else {
        <h3 class="text-center">Aún no hay intercambios</h3>
      }
    </div>
  </div>
</div>

@code {
  List<ResolvedExchange> exchanges = new List<ResolvedExchange>();
  List<TransportHistory> transports = new List<TransportHistory>();
  List<Post> posts = new List<Post>();
  List<User> users = new List<User>();

  protected override void OnInitialized() {
    // Inicializo listas para usarlas después
    users = userListUseCase.Execute();
    transports.AddRange(ShipHistoryListUseCase.Execute());
    transports.AddRange(VehicleHistoryListUseCase.Execute());  // no hay usecases para transportHistory todavia
    exchanges = resolvedExchangeListUseCase.Execute();
    exchanges.Reverse();

    posts = listPostUseCase.Execute();
  }

  // Obtiene el userName del dueño del post involucrado
  public string getPostTarget(ResolvedExchange exchange) {
    if(transports != null && postedTransport != null && users != null){
      TransportHistory postedTransport = transports.Find(transport => transport.Id == exchange.transportePosteadoId);
      User postedTransportOwner = users.Find(user => user.Id == postedTransport.UserId);
      return postedTransportOwner.userName;
    }
    return "";
  }

  // Obtiene el userName del dueño del transporte ofertado involucrado
  public string getOfferTarget(ResolvedExchange exchange) {
    TransportHistory offeredTransport = transports.Find(transport => transport.Id == exchange.transporteOfertadoId);
    User postedTransportOwner = users.Find(user => user.Id == offeredTransport.UserId);
    return postedTransportOwner.userName;
  }

  // Obtiene la patente del transporte ofrecido
  public string getOfferedTransport(ResolvedExchange exchange) {
    TransportHistory offeredTransport = transports.Find(transport => transport.Id == exchange.transporteOfertadoId);
    return $"{offeredTransport.type} {offeredTransport.model} {offeredTransport.plate}";
  }

  // Obtiene la patente del transporte publicado
  public string getPostedTransport(ResolvedExchange exchange) {
    TransportHistory postedTransport = transports.Find(transport => transport.Id == exchange.transportePosteadoId);
    return $"{postedTransport.type} {postedTransport.model} {postedTransport.plate}";
  }
}
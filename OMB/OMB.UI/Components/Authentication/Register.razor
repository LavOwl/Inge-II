@page "/register"
@inject NavigationManager navegador
@inject userListUseCase userListUseCase
@inject addUserUseCase addUserUseCase

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage

@rendermode InteractiveServer

<DialogoError @ref="dialogo"/>

<h1>Ingresá tus datos y registrate ya!</h1>

<form>
    <div class="form-group">
        <input placeholder="Dirección de correo electrónico" @bind="user.mail" class="form-control">
    </div>
    <div class="form-group">
        <input placeholder="Nombre" @bind="user.name" class="form-control">
    </div>
    <div class="form-group">
        <input placeholder="Apellido" @bind="user.surname" class="form-control">
    </div>
    <div class="form-group">
        <input type="date" min="@((DateTime.Today.Year - 120).ToString())-01-01" max="@((DateTime.Today.Year).ToString())-01-01" @bind="user.birthDate" class="form-control">
    </div>
    <div class="form-group">
        <input placeholder="Numero de telefono" @bind="user.number" class="form-control">
    </div>
    <div class="form-group">
        <input placeholder="Nombre de usuario" @bind="user.userName" class="form-control">
    </div>
    <div class="form-group">
        <input type="password" placeholder="Contraseña" @bind="user.password" class="form-control">
    </div>
    <div class="form-group">
        <input type="password" placeholder="Confirmar contraseña" @bind="password2" class="form-control">
    </div>
   <button class="btn btn-primary" @onclick="Aceptar" @onclick:preventDefault>Aceptar</button>
   <a href="login">Ya tenés una cuenta?</a>
    
</form>

@code {
    User user = new User();
    String password2 = "";
    User? newUser;
    DialogoError dialogo = null!;

    protected override void OnInitialized() {
        user.birthDate = DateOnly.FromDateTime(DateTime.Today);
    }

    public async Task Save() {
        if (newUser != null) {
            await sessionStorage.SetAsync("userId", newUser.Id);
            await sessionStorage.SetAsync("isEmployee", false);
            await sessionStorage.SetAsync("cartel?", "Te haz registrado con exito");
        }
    }

    async Task Aceptar() {

        if (string.IsNullOrEmpty(user.userName) || string.IsNullOrEmpty(user.name) || string.IsNullOrEmpty(user.surname) || 
        string.IsNullOrEmpty(user.mail) || string.IsNullOrEmpty(user.password) || string.IsNullOrEmpty(password2) || 
        string.IsNullOrEmpty(user.number)) {
            dialogo.Mostrar("Complete todos los campos para registrarse");
            return;
        }
        if ((user.birthDate > DateOnly.FromDateTime(DateTime.Today)) || (DateOnly.FromDateTime(DateTime.Today) < user.birthDate.AddYears(18))) {
            dialogo.Mostrar("Usted debe ser mayor de edad para crear una cuenta");
            return;
        }

        if (user.password.Length < 8) {
            dialogo.Mostrar("La contraseña debe tener como mínimo 8 caracteres");
            return;
        }

        if (user.password != password2) {
            dialogo.Mostrar("Las contraseñas ingresadas no coinciden");
            return;
        }

        try {
            addUserUseCase.Execute(user);
        }
        catch (Exception ex) {
            if (ex.Message == "Mail already in use!") {
                dialogo.Mostrar("El mail ingresado ya corresponde con una cuenta");
                return;
            }
            if (ex.Message == "This username's already taken!") {
                //dialogo.Mostrar("El nombre de usuario ya se encuentra en uso, podrías probar con " + user.userName + "777");
                dialogo.Mostrar("El nombre de usuario ya se encuentra en uso.");
                return;
            }
        }

        newUser = userListUseCase.Execute().Where(elem => user.userName == elem.userName).SingleOrDefault();

        await Save();

        navegador.NavigateTo("/", true);
        
    }

}

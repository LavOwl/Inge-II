@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage
@inject shipListUseCase shipListUseCase
@inject listShipImagesUseCase listShipImagesUseCase
@inject modifyShipUseCase modifyShipUseCase
@inject deleteShipUseCase deleteShipUseCase

@rendermode InteractiveServer

<DialogoConfirmacion @ref="dialogo" OnConfirmado="eliminarBarco"/>

<div class="modal fade" id="listarBarcosModal" tabindex="-1" data-backdrop="static" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Tus barcos cargados</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
        <div class="modal-body form-body">
          @if (_ships.Count != 0) {
            <table class="table table-striped table-bordered">
              <thead>
                <tr>
                  <th>IMAGEN</th>
                  <th>TIPO</th>
                  <th>MODELO</th>
                  <th>MATRÍCULA</th>
                  <th>ACCIONES</th>
                </tr>
              </thead>
              <tbody>
                @{int i = 0;}
                @foreach (var barco in _ships) {
                  <tr>
                    <td>
                      <div class="img">
                        <img @onclick="()=>VisualizarBarco(barco)" data-bs-toggle="modal" data-bs-target="#visualizarBarcoCargadoModal"
                        src="@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(_images[i]))"/>
                      </div>
                    </td>
                    <td>
                      @barco.type[0].ToString().ToUpper()@barco.type.Substring(1)
                    </td>
                    <td>@barco.model</td>
                    <td>@barco.plate</td>
                    <td>
                      <button class="btn btn-danger" @onclick="()=>confirmarEliminacion(barco)">
                          <i class='bx bxs-trash-alt'></i>
                      </button>
                    </td>
                  </tr>
                  i++;
                }
              </tbody>
            </table>
          } else {
            <h3 class="text-center m-5">Todavía no hay barcos cargados</h3>
          }
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cerrar</button>
        </div>
      </div>
    </div>
</div>

<VisualizarBarcoCargado @ref="visualizarBarco" OnModificado="GetBarcosCargados" />

@code {
    int userId;
    
    List<Ship> _ships = new List<Ship>();
    List<ShipImage> _allImages = new List<ShipImage>();
    List<byte[]> _images = new List<byte[]>();

    DialogoConfirmacion dialogo = null!;
    Ship barcoAEliminar = new Ship();

    VisualizarBarcoCargado visualizarBarco = null!;

    protected override async Task OnInitializedAsync() {
      var result = await sessionStorage.GetAsync<int>("userId");
      userId = result.Success ? result.Value : 0;

      GetBarcosCargados();
    }

    // Cada vez que se abre el modal se debe llamar a Cargar
    public void Cargar() {
      GetBarcosCargados();
      StateHasChanged();
    }

    private void GetBarcosCargados() {
      Console.WriteLine($"Get barcos cargados");

      _ships = shipListUseCase.Execute();
      _ships = _ships.FindAll(ship => ship.UserId == userId);

      GetImagenesBarcos();
    }

    private void GetImagenesBarcos() {
      _allImages = listShipImagesUseCase.Execute();
      _images = new List<byte[]>();

      foreach (var barco in _ships) {
        byte[] image = _allImages.Find(imagen => imagen.ShipId == barco.Id).Image;
        _images.Add(image);
      }
    }

    private void confirmarEliminacion(Ship barco) {
      barcoAEliminar = barco;
      dialogo.Mostrar("¿Seguro qué deseas eliminar el barco?");
    }

    private void eliminarBarco() {
      deleteShipUseCase.Execute(barcoAEliminar.Id);
      GetBarcosCargados();
    }

    public void VisualizarBarco(Ship barco) {
      visualizarBarco.Cargar(barco);
    }
}
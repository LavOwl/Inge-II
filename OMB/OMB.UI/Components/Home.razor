@page "/"
@rendermode InteractiveServer
@inject NavigationManager navegador
@inject shipPostListUseCase shipPostListUseCase
@inject vehiclePostListUseCase vehiclePostListUseCase
@inject listShipImagesUseCase listShipImagesUseCase
@inject listVehicleImagesUseCase listVehicleImagesUseCase
@inject userListUseCase userListUseCase
@inject shipListUseCase shipListUseCase
@inject vehicleListUseCase vehicleListUseCase
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage
@using System.Net
@using System.Net.Mail
@using System.Text

<DialogoError @ref=dialogo/>

@if (!string.IsNullOrEmpty(cartelito) && mostrarCartel) {
    <div class="alert alert-info">
        @cartelito
        <button class="btn" @onclick="() => setFalse()" >
            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z"/>
            </svg>
        </button>
    </div>
}
@if(posts.Count() == 0){
        <h1 class="publicaciones-title">No hay publicaciones disponibles aún</h1>
    }
else{
<!--<div class="container-de-containers">-->
<div class="publicaciones-container">
    
    <h1 class="publicaciones-title">Publicaciones</h1>
    @{ int i = 0; } @* Lo uso para iterar sobre las fotos *@
    @foreach (var p in posts){
        <div class="publicacion" @onclick="async () => await browseToPost(p)">

            <div class="img">
                <img src="@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(_images[i]))"/>
            </div>
            <div class="publicacion-info">
                <h3>@p.getTitle()</h3>
                <h6>@_descripciones[i]</h6>
            </div>
        </div>
        i++; @* Incremento i para seguir iterando *@
    }
</div><!--
    <div class="cuadradito">
        <button class="botoncito-de-decoracion"> Aquí estarán los filtros de busqueda en un futuro. </button>
        <button @onclick="SendEmail">Enviar Mail</button>
    </div>
</div>-->
}
@code {
    List<Post> posts = new List<Post>();
    List<Ship> ships = new List<Ship>();
    List<Vehicle> vehicles = new List<Vehicle>();
    List<User> users = new List<User>();

    List<ShipImage> shipImages = new List<ShipImage>();
    List<VehicleImage> vehicleImages = new List<VehicleImage>();
    List<byte[]> _images = new List<byte[]>();
    List<string> _descripciones = new List<string>();

    DialogoError dialogo = null!;
    string? cartelito;
    bool mostrarCartel;

    bool ver = false;

    protected override async Task OnInitializedAsync() {
        // Llamo solo una vez a los listUseCase
        ships = shipListUseCase.Execute();
        vehicles = vehicleListUseCase.Execute();
        users = userListUseCase.Execute();

        posts.AddRange(shipPostListUseCase.Execute());
        posts.AddRange(vehiclePostListUseCase.Execute());
        
        shipImages = listShipImagesUseCase.Execute();
        vehicleImages = listVehicleImagesUseCase.Execute();

        // Sacamos los posts de las personas baneadas
        posts.RemoveAll(p => 
            null != users.Where(u =>
                u.banned && (ships.Where(s =>
                    (s.Id == p.getId()) && p.getType()).Count() != 0) && (u.Id == ships.Where(s =>
                        (s.Id == p.getId()) && p.getType()).SingleOrDefault().UserId)).SingleOrDefault());

        posts.RemoveAll(p =>
            null != users.Where(u =>
                u.banned && (vehicles.Where(s =>
                    (s.Id == p.getId()) && !p.getType()).Count() != 0) && (u.Id == vehicles.Where(s =>
                        (s.Id == p.getId()) && !p.getType()).SingleOrDefault().UserId)).SingleOrDefault());

        // Reordenamos los posts
        posts = posts.OrderBy(_ => Guid.NewGuid()).ToList();

        // Generamos la lista de fotos para ambos tipos de post
        // Generamos la lista de descripciones
        foreach (var post in posts) {
            bool type = post.getType();
            
            if (type) {
                byte[] image = shipImages.Find(imagen => imagen.ShipId == post.getId()).Image;
                _images.Add(image);

                string descripcion = ships.Find(barco => barco.Id == post.getId()).description;
                _descripciones.Add(descripcion);
            } else {
                byte[] image = vehicleImages.Find(imagen => imagen.VehicleId == post.getId()).Image;
                _images.Add(image);

                string descripcion = vehicles.Find(vehiculo => vehiculo.Id == post.getId()).description;
                _descripciones.Add(descripcion);
            }
        }

        var result  = await sessionStorage.GetAsync<string>("cartel?");
        cartelito = result.Success ? result.Value : null;
        mostrarCartel = true;
        await sessionStorage.DeleteAsync("cartel?");
    }

    private void setFalse () {
        this.mostrarCartel = false;
    }

    
    string GenerateRandomString(int length) {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        Random random = new Random();
        StringBuilder sb = new StringBuilder(length);

        for (int i = 0; i < length; i++) {
            int randomIndex = random.Next(chars.Length);
            sb.Append(chars[randomIndex]);
        }

        return sb.ToString();
    }

    public async Task SendEmail() {
        string mail = "ide088re@gmail.com";
        string password = GenerateRandomString(10);
        // Lo mejor sería no tener todo este string acá. Tenemos que ver como importarlo o algo así
        var body = $@"
        <body style='margin: 0;padding: 0;-webkit-text-size-adjust: 100%;background-color: #ffffff;color: #000000;'>
        <table style='border-collapse: collapse;table-layout: fixed;border-spacing: 0;mso-table-lspace: 0pt;mso-table-rspace: 0pt;vertical-align: top;min-width: 320px;margin: 0 auto;background-color: #ffffff;width: 100%;'cellpadding='0'cellspacing='0'>
            <tbody>
            <tr style='vertical-align: top'>
                <td style='word-break: break-word;border-collapse: collapse !important;vertical-align: top;'>
                <div style='padding: 0px; background-color: transparent'>
                    <div class='u-row'
                    style='margin: 0 auto;min-width: 320px;max-width: 600px;overflow-wrap: break-word;word-wrap: break-word;word-break: break-word;background-color: transparent;'>
                    <div style='border-collapse: collapse;display: table;width: 100%;height: 100%;background-color: transparent;'>
                        <div class='u-col u-col-100'style='max-width: 320px;min-width: 600px;display: table-cell;vertical-align: top;'>
                        <div style='background-color: #4264f0;height: 100%;width: 100% !important;border-radius: 0px;-webkit-border-radius: 0px;-moz-border-radius: 0px;'>
                            <divstyle='box-sizing: border-box;height: 100%;padding: 0px;border-top: 0px solid transparent;border-left: 0px solid transparent;border-right: 0px solid transparent;border-bottom: 0px solid transparent;border-radius: 0px;-webkit-border-radius: 0px;-moz-border-radius: 0px;'>
                            <table id='u_content_image_1'style='font-family: ""Raleway"", sans-serif'role='presentation'cellpadding='0'cellspacing='0'width='100%'border='0'>
                                <tbody>
                                <tr>
                                    <td class='v-container-padding-padding'style='overflow-wrap: break-word;word-break: break-word;padding: 25px 10px 15px;font-family: ""Raleway"", sans-serif;'align='left'>
                                    <table width='100%'cellpadding='0'cellspacing='0'border='0'>
                                        <tr>
                                        <td style='padding-right: 0px;padding-left: 0px;'align='center'>
                                            <img align='center'border='0'src='cid:Logo.jpg'alt='image'title='image'style='outline: none;text-decoration: none;-ms-interpolation-mode: bicubic;clear: both;display: inline-block !important;border: none;height: auto;float: none;width: 13%;max-width: 75.4px;'width='75.4'class='v-src-width v-src-max-width'/>
                                        </td>
                                        </tr>
                                    </table>
                                    </td>
                                </tr>
                                </tbody>
                            </table>
                            </div>
                        </div>
                        </div>
                    </div>
                    </div>
                </div>

                <div style='padding: 0px; background-color: transparent'>
                    <div style='margin: 0 auto;min-width: 320px;max-width: 600px;overflow-wrap: break-word;word-wrap: break-word;word-break: break-word;background-color: transparent;'>
                    <div style='border-collapse: collapse;display: table;width: 100%;height: 100%;background-color: transparent;'>
                        <div class='u-col u-col-100'style='max-width: 320px;min-width: 600px;display: table-cell;vertical-align: top;'>
                        <div style='background-color: #4264f0;height: 100%;width: 100% !important;'>
                            <div style='box-sizing: border-box;height: 100%;padding: 10px;border-top: 0px solid transparent;border-left: 0px solid transparent;border-right: 0px solid transparent;border-bottom: 0px solid transparent;'>
                            <table id='u_content_heading_1'style='font-family: ""Raleway"", sans-serif'role='presentation'cellpadding='0'cellspacing='0'width='100%'border='0'>
                                <tbody>
                                <tr>
                                    <td style='overflow-wrap: break-word;word-break: break-word;padding: 10px 10px 0px;font-family: ""Raleway"", sans-serif;'align='left'>
                                    <h1 style='margin: 0px;color: #ffffff;line-height: 140%;text-align: center;word-wrap: break-word;font-size: 35px;font-weight: 400;'>
                                        <strong>Contraseña Generada</strong>
                                    </h1>
                                    </td>
                                </tr>
                                </tbody>
                            </table>

                            <table id='u_content_text_1'style='font-family: ""Raleway"", sans-serif'role='presentation'cellpadding='0'cellspacing='0'width='100%'border='0'>
                                <tbody>
                                <tr>
                                    <td style='overflow-wrap: break-word;word-break: break-word;padding: 5px 50px 25px;font-family: ""Raleway"", sans-serif;'align='left'>
                                    <div style='font-size: 14px;color: #f4f4f4;line-height: 140%;text-align: center;word-wrap: break-word;'>
                                        <p style='line-height: 140%;margin-bottom: 0;'>
                                        ¡Tu contraseña ha sido generada con exito!
                                        </p>
                                        <p style='line-height: 140%;margin-top: 0;'>
                                        Para poder iniciar sesión deberás utilizar
                                        </p>
                                        <p style='line-height: 140%;margin-bottom: 0;'>
                                        Email: {mail}
                                        </p>
                                        <p style='line-height: 140%;margin-top: 0;'>
                                        Contraseña: {password}
                                        </p>
                                    </div>
                                    </td>
                                </tr>
                                </tbody>
                            </table>
                            </div>
                        </div>
                        </div>
                    </div>
                    </div>
                </div>
                </td>
            </tr>
            </tbody>
        </table>
        </body>
        ";

        var message = new MailMessage();
        message.To.Add(new MailAddress(mail)); // Aca iría el mail de la persona
        message.From = new MailAddress("ohmyboatt@gmail.com");
        message.Subject = "¡Contraseña generada con exito!";
        message.Body = string.Format(body);
        message.IsBodyHtml = true;

        // Create  the file attachment for this email message.
        string file = @"wwwroot\Oh_My_Boat_logo_2.jpg";
        Attachment data = new Attachment(file);
        // Add the file attachment to this email message.
        message.Attachments.Add(data);
        message.Attachments[0].ContentId = "Logo.jpg";

        using (var smtp = new SmtpClient()) {
            var credential = new NetworkCredential {
                UserName = "ohmyboatt@gmail.com",  // Nuestro mail
                Password = "zpvp izli biid bhop"  // Contraseña de la aplicación de google
            };

            smtp.Credentials = credential;
            smtp.Host = "smtp.gmail.com";
            smtp.Port = 587;
            smtp.EnableSsl = true;
            await smtp.SendMailAsync(message);
        }
    }
    
   private void setFalse () {
    this.mostrarCartel = false;
   }

    private async Task browseToPost(Post p) {
        try {
            if (p.getType()) {      // getType returns True if p is ShipPost
                navegador.NavigateTo("/shippost/" + p.getId(), true);
            } else {            // if getType is false then p is VehiclePost
                navegador.NavigateTo("/profile/manubarreto", true);  // placeholder for testing
            }
        }
        catch (TaskCanceledException) {
            // Retry navigation if it fails due to a TaskCanceledException (un error bastante raro)
            await Task.Delay(500); // Wait half a sec before trying again
            await browseToPost(p); // Retry navigation
        }
    }

}

@page "/"
@rendermode InteractiveServer
@inject NavigationManager Navegador
@inject shipPostListUseCase shipPostListUseCase
@inject vehiclePostListUseCase vehiclePostListUseCase
@inject listShipImagesUseCase listShipImagesUseCase
@inject listVehicleImagesUseCase listVehicleImagesUseCase
@inject userListUseCase userListUseCase
@inject shipListUseCase shipListUseCase
@inject vehicleListUseCase vehicleListUseCase
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage

<DialogoError @ref=dialogo/>



@if (!string.IsNullOrEmpty(cartelito) && mostrarCartel) {
    <div class="alert alert-info">
        @cartelito
        <button class="btn" @onclick="() => setFalse()" >
            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z"/>
            </svg>
        </button>
    </div>
}

<table width="100%" class="table">
    <thead>
        <tr>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @{ int i = 0; } @* Lo uso para iterar sobre las fotos *@
        @foreach (var p in posts){
            <tr>
                <td>
                    <img src="@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(_images[i]))" 
                    width="100" height="100" style="object-fit: cover;"/>
                </td>
                <td>@p.getTitle()</td>
            </tr>
            i++; @* Incremento i para seguir iterando *@
        }
    </tbody>
</table>

@code {
    List<Post> posts = new List<Post>();
    List<Ship> ships = new List<Ship>();
    List<Vehicle> vehicles = new List<Vehicle>();
    List<User> users = new List<User>();

    List<ShipImage> shipImages = new List<ShipImage>();
    List<VehicleImage> vehicleImages = new List<VehicleImage>();
    List<byte[]> _images = new List<byte[]>();
    DialogoError dialogo = null!;
    string? cartelito;
    bool mostrarCartel;

    bool ver = false;

    protected override async Task OnInitializedAsync() {
        // Llamo solo una vez a los listUseCase
        ships = shipListUseCase.Execute();
        vehicles = vehicleListUseCase.Execute();
        users = userListUseCase.Execute();

        posts.AddRange(shipPostListUseCase.Execute());
        posts.AddRange(vehiclePostListUseCase.Execute());
        
        shipImages = listShipImagesUseCase.Execute();
        vehicleImages = listVehicleImagesUseCase.Execute();

        // Sacamos los posts de las personas baneadas
        posts.RemoveAll(p => 
            null != users.Where(u =>
                u.banned && (ships.Where(s =>
                    (s.Id == p.getId()) && p.getType()).Count() != 0) && (u.Id == ships.Where(s =>
                        (s.Id == p.getId()) && p.getType()).SingleOrDefault().UserId)).SingleOrDefault());

        posts.RemoveAll(p =>
            null != users.Where(u =>
                u.banned && (vehicles.Where(s =>
                    (s.Id == p.getId()) && !p.getType()).Count() != 0) && (u.Id == vehicles.Where(s =>
                        (s.Id == p.getId()) && !p.getType()).SingleOrDefault().UserId)).SingleOrDefault());

        // Reordenamos los posts
        posts = posts.OrderBy(_ => Guid.NewGuid()).ToList();

        // Generamos la lista de fotos para ambos tipos de post
        foreach (var post in posts) {
            bool type = post.getType();
            
            if (type) {
                byte[] image = shipImages.Find(imagen => imagen.ShipId == post.getId()).Image;
                _images.Add(image);
            } else {
                byte[] image = vehicleImages.Find(imagen => imagen.VehicleId == post.getId()).Image;
                _images.Add(image);
            }
        }

        var result  = await sessionStorage.GetAsync<string>("cartel?");
        cartelito = result.Success ? result.Value : null;
        mostrarCartel = true;
        await sessionStorage.DeleteAsync("cartel?");
   }

   private void setFalse () {
    this.mostrarCartel = false;
   }
}

@page "/listarmisintercambios"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage
@inject NavigationManager navegador
@inject userListUseCase userListUseCase
@inject listTransportUseCase listTransportUseCase
@inject unresolvedExchangeListUseCase unresolvedExchangeListUseCase

<div class="exchanges-container">
  <div class="exchanges">
    <h1 class="exchanges-title1">Intercambios Hechos</h1>
    <div class="exchanges-body">
      @if (madeExchanges.Any()) {
          @foreach (var exchange in madeExchanges){
              <div class="exchange-info" @onclick="async () => await browseToExchange(exchange.Id)">
                <h4>Dueño publicación @getPostTarget(exchange)</h4>
                <h6>Publicado @getPostedTransport(exchange)</h6>
                <h6>Ofertás @getOfferedTransport(exchange)</h6>
              </div>
          }
      } else {
        <h3 class="text-center">Aún no hay intercambios</h3>
      }
    </div>
  </div>
   <div class="exchanges">
    <h1 class="exchanges-title2">Intercambios Recibidos</h1>
    <div class="exchanges-body">
      @if (receivedExchanges.Any()) {
          @foreach (var exchange in receivedExchanges){
            <div class="exchange-info" @onclick="async () => await browseToExchange(exchange.Id)">
              <h4>Ofertante @getOfferTarget(exchange)</h4>
              <h6>Oferta @getOfferedTransport(exchange)</h6>
              <h6>Publicación @getPostedTransport(exchange)</h6>
            </div>
          }
      } else {
        <h3 class="text-center">Aún no hay intercambios</h3>
      }
    </div>
  </div>
</div>


@code {
  List<UnresolvedExchange> unresolvedExchanges = new List<UnresolvedExchange>();
  List<UnresolvedExchange> madeExchanges = new List<UnresolvedExchange>(); // Los que oferto algo yo
  List<UnresolvedExchange> receivedExchanges = new List<UnresolvedExchange>(); // Los que me ofertan algo a mí
  List<Transport> transports = new List<Transport>();
  List<User> users = new List<User>();
  int loggedUserId;

  protected override async Task OnInitializedAsync() {
    // Inicializo en exchanges las ofertas hechas por el usuario loggeado
    // Se supone que acá solo llegan los clientes loggeados
    var getLoggedUser = await sessionStorage.GetAsync<int>("userId");
    loggedUserId = getLoggedUser.Success ? getLoggedUser.Value : 0;

    users = userListUseCase.Execute();
    transports = listTransportUseCase.Execute();
    unresolvedExchanges = unresolvedExchangeListUseCase.Execute();
    getExchanges();
  }

  public void getExchanges () {
    // Ids de todos los transportes del usuario loggeado
    List<int> transportIds = transports.FindAll(T => T.UserId == loggedUserId).Select(T => T.Id).ToList();
    // Todas los intercambios donde se está involucrado un transporte del usuario
    madeExchanges = unresolvedExchanges.FindAll(Exc => transportIds.Contains(Exc.transporteOfertadoId));
    receivedExchanges = unresolvedExchanges.FindAll(Exc => transportIds.Contains(Exc.transportePosteadoId));
  }

  // Obtiene el userName del dueño del post involucrado
  public string getPostTarget(Exchange exchange) {
    Transport postedTransport = transports.Find(transport => transport.Id == exchange.transportePosteadoId);
    User postedTransportOwner = users.Find(user => user.Id == postedTransport.UserId);
    return postedTransportOwner.userName;
  }

  // Obtiene el userName del dueño del transporte ofertado involucrado
  public string getOfferTarget(Exchange exchange) {
    Transport offeredTransport = transports.Find(transport => transport.Id == exchange.transporteOfertadoId);
    User postedTransportOwner = users.Find(user => user.Id == offeredTransport.UserId);
    return postedTransportOwner.userName;
  }

  // Obtiene la patente del transporte ofrecido
  public string getOfferedTransport(Exchange exchange) {
    Transport offeredTransport = transports.Find(transport => transport.Id == exchange.transporteOfertadoId);
    return offeredTransport.plate;
  }

  // Obtiene la patente del transporte publicado
  public string getPostedTransport(Exchange exchange) {
    Transport postedTransport = transports.Find(transport => transport.Id == exchange.transportePosteadoId);
    return postedTransport.plate;
  }

  public async Task browseToExchange(int exchangeId) {
    navegador.NavigateTo("exchange/" + exchangeId, true);
  }
}
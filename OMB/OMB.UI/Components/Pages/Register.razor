@page "/register"
@inject NavigationManager navegador
@inject userListUseCase userListUseCase
@inject addUserUseCase addUserUseCase
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage

<DialogoError @ref="dialogo"/>

<h1>Ingresá tus datos y registrate ya!</h1>

<input placeholder="Username" @bind="user.userName" class="form-control">
<input placeholder="Mail" @bind="user.mail" class="form-control">
<input placeholder="Name" @bind="user.name" class="form-control">
<input placeholder="Surname" @bind="user.surname" class="form-control">
<input type="password" placeholder="Password" @bind="user.password" class="form-control">
<input type="date" placeholder="Birthdate" @bind="user.birthDate" class="form-control">
<input placeholder="Number" @bind="user.number" class="form-control">
<button class="btn btn-primary" @onclick="Aceptar">Aceptar</button>
<a href="login">Ya tenés una cuenta?</a>

@code {
    User user = new User();
    DialogoError dialogo = null!;
    public async Task Save() {
        if (user != null)
            await sessionStorage.SetAsync("userId", user.Id);
    }
    async void Aceptar() {
        if (!validarDatos()) {
            return;
        }

        try {
            addUserUseCase.Execute(user);
        }
        catch (Exception ex) {
            if (ex.Message == "Mail already in use!") {
                dialogo.Mostrar("El mail ingresado ya corresponde con una cuenta");
                return;
            }
            if (ex.Message == "This username's already taken!") {
                dialogo.Mostrar("El nombre de usuario ya se encuentra en uso, podrías probar con " + user.userName + "777");
                return;
            }
        }

        user = userListUseCase.Execute().Where(user => user.userName == user.userName).SingleOrDefault();

        await Save();
        
        navegador.NavigateTo("/");
        
    }

    bool validarDatos() {
        if (string.IsNullOrEmpty(user.userName) || string.IsNullOrEmpty(user.name) || string.IsNullOrEmpty(user.surname) || 
        string.IsNullOrEmpty(user.mail) || string.IsNullOrEmpty(user.password) || string.IsNullOrEmpty(user.number)) {
            dialogo.Mostrar("Ingrese todos los datos para loggearse");
            return false;
        }
        if (DateOnly.FromDateTime(DateTime.Today) < user.birthDate.AddYears(18)) {
            dialogo.Mostrar("Usted debe ser mayor de edad para crear una cuenta");
            return false;
        }
        if (user.password.Length < 8) {
            dialogo.Mostrar("La contraseña debe tener como mínimo 8 dígitos");
            return false;
        }
        return true;
    }
}

@page "/estadisticas"
@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject resolvedExchangeListUseCase resolvedExchangeListUseCase
@inject listSedesUseCase sedesListUseCase
<button class="btn btn-black btn-sm" @onclick="ExportToPdf">Descargar PDF</button>
<br>
<div class="chart-container">
    <p><strong>Intercambios concretados <br> a no concretados</strong></p>
    <p id="intercambios"></p>
</div>
<div class="bar-container">
    <p><strong>Intercambios por sede</strong></p>
    <p id="sedes"></p>
</div>
<div>
    <p><strong>Intercambios por sede</strong></p>
    <p id="tipos"></p>
</div>

@code {
    List<ResolvedExchange> resolvedExchanges = new List<ResolvedExchange>();

    class listElement {
        public string type {
            get; set;
        }
        public int exchanges {
            get; set;
        }
        public listElement(string type) {
            this.type = type;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            resolvedExchanges = resolvedExchangeListUseCase.Execute();

            inicializarIntercambiosResueltos();

            inicializarIntercambiosPorSede();

            inicializarListaTransportes();

        }
    }

    // GRÁFICO INTERCAMBIOS RESUELTOS Y NO RESUELTOS
    protected async void inicializarIntercambiosResueltos() {
        int concreted = resolvedExchanges.Where(r => r.happen).Count();
        int total = resolvedExchanges.Count();

        var yData = new[] { "Concretados", "No concretados" };
        var xData = new[] { concreted, total-concreted };

        await JS.InvokeVoidAsync("renderPlotlyPieChart", "intercambios", xData, yData, "Intercambios", 400, 650);
    }

    // GRÁFICO INTERCAMBIOS POR SEDE
    protected async void inicializarIntercambiosPorSede() {
        List<Sede> sedes = sedesListUseCase.Execute();
        List<string> names = new List<string>();
        List<int> amounts = new List<int>();
        foreach (Sede s in sedes) {
            names.Add(s.name);
            amounts.Add(resolvedExchanges.Where(e => e.sede.Id == s.Id).Count());
        }

        await JS.InvokeVoidAsync("renderPlotlyBarChart", "sedes", names.ToArray(), amounts.ToArray(), "Por Sede", 400, 500);

    }

    // LISTA DE TRANSPORTES MÁS USADOS
    private async void inicializarListaTransportes() {
        var tipos = new[] { "Auto", "Camioneta", "Ciclomotor", "Crucero", "Velero", "Lancha", "Catamaran" };

        List<int> valoresList = new List<int>();
        foreach (string tipo in tipos) {
            valoresList.Add(resolvedExchanges.Where(r => r.transporteOfertado.type == tipo).Count() + resolvedExchanges.Where(r => r.transportePosteado.type == tipo).Count());
        }

        var valores = valoresList.ToArray();

        //Si chicos, si, es el algoritmo de ordenación de CADP
        int i, j, p, item;
        string nombre;
        for (i = 0; i < 6; i++) {
            p = i;
            for (j = i+1; j < 7; j++) {
                if (valores[j] < valores[p])
                    p = j;
                item = valores[p];
                valores[p] = valores[i];
                valores[i] = item;
                nombre = tipos[p];
                tipos[p] = tipos[i];
                tipos[i] = nombre;
            }
        }

        await JS.InvokeVoidAsync("renderPlotlyHorizontalBarChart", "tipos", tipos, valores, "Intercambios por tipo", 400, 500);
    }

    // EXPORTAR A PDF
    private async Task ExportToPdf() {
        await JS.InvokeVoidAsync("exportPlotlyChartToPdf", DateTime.Now.ToString("dd/MM/yyyy"));
    }
}
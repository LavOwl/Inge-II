@page "/registrarempleado"
@inject NavigationManager navegador
@inject employeeListUseCase employeeListUseCase
@inject addEmployeeUseCase addEmployeeUseCase
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage
@using System.Text;

<DialogoError @ref="dialogo"/>

<h1>Ingrese los datos para registrar a un nuevo empleado</h1>

<input placeholder="Dirección de correo electrónico" @bind="employee.mail" class="form-control">
<input placeholder="Nombre" @bind="employee.name" class="form-control">
<input placeholder="Apellido" @bind="employee.surname" class="form-control">
<input type="date" min="@((DateTime.Today.Year - 120).ToString())-01-01" max="@((DateTime.Today.Year).ToString())-01-01" @bind="employee.birthDate" class="form-control">
<input placeholder="Numero de telefono" @bind="employee.number" class="form-control">
<input placeholder="Nombre de usuario" @bind="employee.userName" class="form-control">
<button class="btn btn-primary" @onclick="Aceptar">Aceptar</button>

<Emails @ref=emails/>

@code {
    Employee employee = new Employee();
    Employee? newEmployee;
    DialogoError dialogo = null!;
    Emails emails = null!;
    
    public async Task Save() {
        if (newEmployee != null) {
            await sessionStorage.SetAsync("cartel?", "El empleado fue registrado con éxito");
        }
    }

    async void Aceptar() {
        if (!validarDatos()) {
            return;
        }

        employee.password = GenerateRandomString(8);

        if (addemployee()) {
            return;
        }

        newEmployee = employeeListUseCase.Execute().Where(elem => employee.userName == elem.userName).SingleOrDefault();

        await Save();
        
        // Manda mail al empleado
        emails.SendEmail(
            "¡Contraseña creada!", // Subject
            employee.mail, // Mail
            "¡Contraseña creada con éxito!", // Titulo
            $@"
            <p style='line-height: 140%;margin-bottom: 0;'>¡Tu contraseña ha sido generada con exito!</p>
            <p style='line-height: 140%;margin-top: 0;'>Para poder iniciar sesión deberás utilizar</p>
            <p style='line-height: 140%;margin-bottom: 0;'>Email: {employee.mail}</p>
            <p style='line-height: 140%;margin-top: 0;'>Contraseña: {employee.password}</p>
            " // Cuerpo
        );
        
        navegador.NavigateTo("/homeemployee");
        
    }

    bool validarDatos() {
        if (string.IsNullOrEmpty(employee.userName) || string.IsNullOrEmpty(employee.name) || string.IsNullOrEmpty(employee.surname) || 
        string.IsNullOrEmpty(employee.mail) || string.IsNullOrEmpty(employee.number)) {
            dialogo.Mostrar("Complete todos los campos antes de registrar al empleado");
            return false;
        }
        if ((employee.birthDate > DateOnly.FromDateTime(DateTime.Today)) || (DateOnly.FromDateTime(DateTime.Today) < employee.birthDate.AddYears(18))) {
            dialogo.Mostrar("El empleado debe ser mayor de edad para crear la cuenta");
            return false;
        }
        return true;
    }

    bool addemployee() {
        try {
            addEmployeeUseCase.Execute(employee);
        }
        catch (Exception ex) {
            if (ex.Message == "Mail already in use!") {
                dialogo.Mostrar("El mail ingresado ya corresponde con una cuenta");
                return true;
            }
            if (ex.Message == "This username's already taken!") {
                dialogo.Mostrar("El nombre de usuario ya se encuentra en uso.");
                return true;
            }
        }
        return false;
    }

    string GenerateRandomString(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        Random random = new Random();
        StringBuilder sb = new StringBuilder(length);

        for (int i = 0; i < length; i++)
        {
            int randomIndex = random.Next(chars.Length);
            sb.Append(chars[randomIndex]);
        }

        return sb.ToString();
    }
}
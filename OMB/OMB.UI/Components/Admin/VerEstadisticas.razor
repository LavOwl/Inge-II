@page "/verestadisticas"
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Axes.Ticks
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.BarChart
@using System.Drawing
@using Microsoft.AspNetCore.Components
@using System.Collections.Generic
@inject resolvedExchangeListUseCase resolvedExchangeListUseCase
@inject listSedesUseCase listSedesUseCase
@using QuestPDF.Fluent
@using QuestPDF.Helpers
@using QuestPDF.Infrastructure

<div class = "chart-container">
    <Chart Config="_config"></Chart>
</div>
<div class = "bar-container">
    <Chart Config="_barConfig"></Chart>
</div>

<div class="container">
  <p class="titulo"><strong><small>Tipo de transporte m√°s intercambiado</small></strong></p>
  <ul class="responsive-table">
    <li class="table-header">
      <div class="col col-1">Tipo:</div>
      <div class="col col-2">@exchanges[0].type</div>
      <div class="col col-3">Intercambios:</div>
      <div class="col col-4">@exchanges[0].exchanges</div>
    </li>
    @for(int i = 1; i < 7; i++){
        <li class="table-row">
        <div class="col col-1" data-label="Job Id">Tipo:</div>
        <div class="col col-2" data-label="Customer Name">@exchanges[i].type</div>
        <div class="col col-3" data-label="Amount">Intercambios:</div>
        <div class="col col-4" data-label="Payment Status">@exchanges[i].exchanges</div>
        </li>
    }
  </ul>
  <button class="btn btn-primary" @onclick="genPDF">Descargar PDF</button>
</div>

@code {
    private PieConfig _config;
    private BarConfig _barConfig;
    private listElement[] exchanges = new listElement[7]{new listElement("Auto"), new listElement("Camioneta"), new listElement("Ciclomotor"), new listElement("Crucero"), new listElement("Velero"), new listElement("Lancha"), new listElement("Catamaran")};
    List<ResolvedExchange> resolvedExchanges;
    

    protected override void OnInitialized()
    {
        resolvedExchanges = resolvedExchangeListUseCase.Execute();
        inicializarIntercambiosResueltos();
        
        inicializarIntercambiosPorSede();

        inicializarListaTransportes();
    }

    class listElement
    {
        public string type { get; set; }
        public int exchanges { get; set; }
        public listElement(string type){
            this.type = type;
        }
    }

    private void inicializarListaTransportes(){
        for(int i = 0; i < 7; i++){
            exchanges[i].exchanges = resolvedExchanges.Where(r => r.transporteOfertado.type == exchanges[i].type).Count();
            exchanges[i].exchanges += resolvedExchanges.Where(r => r.transportePosteado.type == exchanges[i].type).Count();
        }
        exchanges = exchanges.OrderByDescending(t => t.exchanges).ToArray();
    }

    private void inicializarIntercambiosResueltos () {
        _config = new PieConfig
        {
            Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle()
                {
                    Display = true,
                    Text = "Intercambios concretados"
                },
            }
        };
        int concreted = resolvedExchanges.Where(r => r.happen).Count();
        int total = resolvedExchanges.Count();

        if (total > 0) {
            foreach (string color in new[] { "Concretados "+concreted/total*100+"% ", "No concretados "+(total-concreted)/total*100+"% " })
            {
                _config.Data.Labels.Add(color);
            }

            PieDataset<int> dataset = new PieDataset<int>(new[] {concreted, total-concreted})
            {
                BackgroundColor = new[]
                {
                    ColorUtil.ColorHexString(3, 4, 94),
                    ColorUtil.ColorHexString(0xCA, 0xF0, 0xF8),
                }
            };
        
            _config.Data.Datasets.Add(dataset);
        }
    }

    private void inicializarIntercambiosPorSede () {
        _barConfig = new BarConfig(horizontal: false)
            {
                Options = new BarOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Cantidad de intercambios por sede"
                    },
                    Scales = new BarScales
                    {
                        YAxes = new List<CartesianAxis>
                        {
                            new LinearCartesianAxis
                            {
                                Ticks = new LinearCartesianTicks
                                {
                                    Min = 0,
                                    BeginAtZero = true
                                }
                            }
                        }
                    }
                    
                }
            };
        List<Sede> sedes = listSedesUseCase.Execute();
        List<int> data = new List<int>();
        foreach (Sede s in sedes)
        {
            _barConfig.Data.Labels.Add(s.name);
            data.Add(resolvedExchanges.Where(e => e.sede.Id == s.Id).Count());
        }

        var barData = new BarDataset<int> (data)
        {
            Label="Intercambios",
            BackgroundColor = ColorUtil.ColorHexString(0x3a, 0x0c, 0xa3),
            BorderColor = ColorUtil.ColorHexString(0x3a, 0x7c, 0xa5),
            BorderWidth = 1
        };

        _barConfig.Data.Datasets.Add(barData);
    }

    private void genPDF() {
        QuestPDF.Settings.License = LicenseType.Community;
        Document.Create(container =>
        {
            container.Page(page =>
            {
                page.Size(PageSizes.A4);
                page.Margin(2, Unit.Centimetre);
                page.PageColor(Colors.White);
                page.DefaultTextStyle(x => x.FontSize(20));
                
                page.Header()
                    .Text("Hello PDF!")
                    .SemiBold().FontSize(36).FontColor(Colors.Blue.Medium);
                
                page.Content()
                    .PaddingVertical(1, Unit.Centimetre)
                    .Column(x =>
                    {
                        x.Spacing(20);
                        
                        x.Item().Text(Placeholders.LoremIpsum());
                        x.Item().Image(Placeholders.Image(200, 100));
                    });
                
                page.Footer()
                    .AlignCenter()
                    .Text(x =>
                    {
                        x.Span("Page ");
                        x.CurrentPageNumber();
                    });
            });
        })
        .GeneratePdf("hello.pdf");
    }

}
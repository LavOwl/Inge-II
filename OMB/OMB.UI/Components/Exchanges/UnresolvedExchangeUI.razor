@page "/exchange/{exchangeId:int?}"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@rendermode InteractiveServer
@inject ProtectedSessionStorage sessionStorage
@inject userListUseCase userListUseCase
@inject unresolvedExchangeListUseCase unresolvedExchangeListUseCase
@inject deleteUnresolvedExchangeUseCase deleteUnresolvedExchangeUseCase
@inject listTransportUseCase listTransportUseCase
@inject listPostUseCase listPostUseCase
@inject offerListUseCase offerListUseCase
@inject NavigationManager Navegador

<DialogoConfirmacion @ref="dialogoAccept" OnConfirmado="cancel"/>
<DialogoConfirmacion @ref="dialogoTry" OnConfirmado="cancel"/>
<DialogoConfirmacion @ref="dialogoCancel" OnConfirmado="cancel"/>

@if (isEmployee) {
    <div> html para empleados? </div>
} else if (isParticipant) { // is owner or offerer
    if (ownerTransport != null && offererTransport != null) {       //sino pones este if renderiza antes de conseguir las variables y detona (anashe)
        <body>
            <div class="exchange-container">
                <div class="user-info">
                    <h2>Ofertante: @offerer.userName</h2>
                    <div class="vehicle-info">
                        <h3>Ofrece:</h3>
                        <p>Tipo: @offererTransport.type</p>
                        <p>Modelo: @offererTransport.model</p>
                        <!-- Add more vehicle details here -->
                    </div>
                </div>
                <div class="user-info">
                    <h2>Dueño: @owner.userName</h2>
                    <div class="vehicle-info">
                        <h3>Se solicita:</h3>
                        <p>Tipo: @ownerTransport.type</p>
                        <p>Modelo: @ownerTransport.model</p>
                        <!-- Add more vehicle details here -->
                    </div>
                </div>
            </div>
            <div class="buttons">
                @if (isMyTurn()) {
                    <button class="accept" @onclick="confirmarCancel">Aceptar Intercambio</button>
                    <button class="try" @onclick="confirmarCancel">ofrecer horario</button>
                }
                @if (!isMyTurn()) {
                    <p> Esperando a que el usuario acepte la oferta u ofrezca una nueva fecha </p>
                }
                <button class="cancel" @onclick="confirmarCancel">Cancelar Intercambio</button>
            </div>
        </body>
    }
}

@code {
    DialogoConfirmacion dialogoAccept = null!;      // tres dialogos para las tres posibles confirmaciones
    DialogoConfirmacion dialogoTry = null!;         // para cada confirmacion tengo que hacer un onConfirmado distinto
    DialogoConfirmacion dialogoCancel = null!;


    [Parameter] public int exchangeId { get; set; }
    UnresolvedExchange actualExchange;

    User owner = new User();
    Transport ownerTransport;
    User offerer = new User();
    Transport offererTransport;

    int loggedUserId = 0;
    bool isEmployee = false;
    bool isParticipant = true;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            //Extrae la información del user loggeado
            var getLoggedUserId = await sessionStorage.GetAsync<int>("userId");
            loggedUserId = getLoggedUserId.Success ? getLoggedUserId.Value : 0;
            var getIsEmployee  = await sessionStorage.GetAsync<bool>("isEmployee");
            isEmployee = getIsEmployee .Success ? getIsEmployee.Value : false;

            // get Exchange from its Id
            actualExchange = await Task.Run(() => unresolvedExchangeListUseCase.Execute().Find(e => e.Id == exchangeId));

            // Load the info after actualExchange is initialized
            loadInfo();
        }
    }

    private void loadInfo() { //cargar info de transportes y los usuarios
        List<Transport> transports = listTransportUseCase.Execute();  // lista de transportes para conseguir los transportes del owner y offerer
        ownerTransport = transports.Where(t => t.Id == actualExchange.transportePosteadoId).SingleOrDefault();
        offererTransport = transports.Where(t => t.Id == actualExchange.transporteOfertadoId).SingleOrDefault();

        List<User> users = userListUseCase.Execute();   // lista de usuarios para conseguir sus infos a través de sus transportes.
        owner = users.Where(u => u.Id == ownerTransport.UserId).SingleOrDefault();
        offerer = users.Where(u => u.Id == offererTransport.UserId).SingleOrDefault();

        // aviso que cambia el estado, osea que se consiguieron los datos para poder renderizar el html
        StateHasChanged();
    }

    private bool iAmOwner() {
        return owner.Id == loggedUserId;
    }
    
    private bool iAmOfferer() {
        return offerer.Id == loggedUserId;
    }

    private bool isMyTurn() {
        return (actualExchange.state == "OffererChooses" && iAmOfferer()) || (actualExchange.state == "OwnerChooses" && iAmOwner());
    }

    /*
    private void confirmarCancel() {
        dialogoCancel.Mostrar("¿Seguro que deseas cancelar el intercambio?");
    }

    private async Task accept() {
        
    }

    private void confirmarTry() {
        dialogoCancel.Mostrar("¿?");
    }
    
    private async Task try() {
        
    } */

    private void confirmarCancel() {
        dialogoCancel.Mostrar("¿Seguro que deseas cancelar el intercambio?");
    }

    private async Task cancel() {
        // borro el intercambio actual
        deleteUnresolvedExchangeUseCase.Execute(exchangeId);
        // consigo las ofertas de ambos transportes del intercambio
        List<Offer> ownerTransportOffers = offerListUseCase.Execute().Where(Offer => Offer.transportePosteadoId == ownerTransport.Id || Offer.transporteOfertadoId == ownerTransport.Id).ToList();
        List<Offer> offererTransportOffers = offerListUseCase.Execute().Where(Offer => Offer.transportePosteadoId == offererTransport.Id || Offer.transporteOfertadoId == offererTransport.Id).ToList();
        // para cada oferta de ambas listas seteo el estado en "active" (osea las despauso)
        ownerTransportOffers.ForEach(Offer => Offer.state = "active");
        offererTransportOffers.ForEach(Offer => Offer.state = "active");
        // consigo la lista de posts de los vehiculos y seteo su paused a false (osea, NO pausados)
        listPostUseCase.Execute().Where(Post => Post.TransportId == ownerTransport.Id || Post.TransportId == offererTransport.Id).ToList().ForEach(Post => Post.paused = false);
        // envio el cartelcito notificando que se canceló el intercambio con exito y navego al home
        await sessionStorage.SetAsync("cartel?", "Intercambio cancelado exitosamente");
        Navegador.NavigateTo("/", true);
        // falta que envie el mail al usuario que NO canceló el intercambio, de que fue cancelado
        // aquí --> santi!!!
    }
}